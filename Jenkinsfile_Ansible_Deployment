@Library('jenkins-shared-library@main') _
pipeline {

  agent any
  
  parameters {
	choice(name: 'action', choices: 'create\nrollback', description: 'Create/rollback of the deployment')
    string(name: 'ImageName', description: "Name of the docker build", defaultValue: "kubernetes-configmap-reload-new")
	string(name: 'ImageTag', description: "Name of the docker build", defaultValue: "v1")
	string(name: 'AppName', description: "Name of the Application", defaultValue: "kubernetes-configmap-reload-new")
    string(name: 'docker_repo', description: "Name of docker repository", defaultValue: "jaik77" )
  }
      
  tools{ 
        maven 'maven3'
    }
    stages {
        stage('Git Checkout') {
            when {
				expression { params.action == 'create' }
			}
            steps {
                gitCheckout(
                    branch: "main",
                    url: "https://github.com/jai-se/spring-cloud-kubernetes-new.git"
                )
            }
        }
        stage('Build Maven'){
            when {
				expression { params.action == 'create' }
			}
    		steps {
        		dir("${params.AppName}") {
        			sh 'mvn clean package'
        		}
    		}
	    }
	    stage("Docker Build and Push") {
	        when {
				expression { params.action == 'create' }
			}
	        steps {
	            dir("${params.AppName}") {
	                dockerBuild ( "${params.ImageName}", "${params.docker_repo}" )
	            }
	        }
	    }
	    stage("Docker CleanUP") {
	        when {
				expression { params.action == 'create' }
			}
	        steps {
	            dockerCleanup ( "${params.ImageName}", "${params.docker_repo}" )
			}
		}
	    stage("Create deployment") {
			when {
				expression { params.action == 'create' }
			}
	        steps {
	            dir("${params.AppName}") {
					withCredentials([
						string(credentialsId: 'jenkins', variable: 'api_token')
						]){
	                sh 'curl -LO "https://storage.googleapis.com/kubernetes-release/release/v1.20.5/bin/linux/amd64/kubectl"'  
                    sh 'chmod u+x ./kubectl'  
	                sh "kubectl --token $api_token --server https://192.168.49.2:8443 --insecure-skip-tls-verify=true apply -f kubernetes-configmap.yml"
	                }
	            }
	        }
	    }
		stage("rollback deployment") {
			when {
				expression { params.action == 'rollback' }
			}
	        steps {
	           withCredentials([
						string(credentialsId: 'jenkins', variable: 'api_token')
						]){
	               sh """
	                    kubectl delete deploy ${params.AppName}
					    kubectl delete svc ${params.AppName}
				   """
	    }
    }
}
